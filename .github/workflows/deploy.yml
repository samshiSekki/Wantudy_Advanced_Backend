name: Spring Boot & Gradle CI/CD 

# Event Trigger
# master branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음 
on:
  push:
    branches: [ develop ]

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-18.04

    # Task의 sequence를 명시한다.
    steps:
    - name: Checkout
      uses: actions/checkout@v2     
#       env:
#         GRADLE_PROPERTIES: ${{ secrets.GRADLE_PROPERTIES }}
#         shell: bash
#         run: |
#           mkdir -p ~/.gradle/
#           echo "GRADLE_USER_HOME=${HOME}/.gradle" >> $GITHUB_ENV
#           echo "${GRADLE_PROPERTIES}" > ~/.gradle/gradle.properties

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: '11'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
      shell: bash
          
    - name: Build with Gradle # 실제 application build(-x 옵션을 통해 test는 제외)
      run: ./gradlew build -x test

      # 추가
    - name: Make zip file #1
      run: zip -qq -r ./$GITHUB_SHA.zip .
      shell: bash

    - name: Configure AWS credentials #2
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Upload to S3 #3
      run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://wantudy-bucket/deploy/$GITHUB_SHA.zip

    - name: Code Deploy #4 // 1.code deploy 애플리케이션 이름/ 2. 배포 방법 설정 (한번에 배포) / 3. codedeploy 배포그룹명 / 4. s3위치
      run: aws deploy create-deployment --application-name wantudy-github-action
        --deployment-config-name CodeDeployDefault.OneAtATime
        --deployment-group-name wantudy-github-action-group
        --s3-location bucket=wantudy-bucket,bundleType=zip,key=deploy/$GITHUB_SHA.zip

